  sudo apt update 
  sudo apt install net-tools
# Check the port availability 
  sudo netstat -tulpn | grep "6443\|2379\|2380\|10250\|10259\|10257"
# allow ports or disable ufw
  sudo ufw allow 6443
  sudo ufw allow 2379
  sudo ufw allow 2380
  sudo ufw allow 10250
  sudo ufw allow 10259
  sudo ufw allow 10257
# Enable time-sync with an NTP server 
  sudo apt install systemd-timesyncd
  sudo timedatectl set-ntp true
# Check the status
  sudo timedatectl status
# disable the swap 
  sudo swapoff -a
  sudo sed -i.bak -r 's/(.+ swap .+)/#\1/' /etc/fstab
# Check the status with free -m command
   free -m
# Check the fstab file as well. otherwise swap will be turned on automatically on reboot
   cat /etc/fstab | grep swap
# Create a file named k8s.conf in /etc/modules-load.d
   sudo vim /etc/modules-load.d/k8s.conf
# Add below content, save and close the file
   overlay
   br_netfilter
# Load above modules to the current session
  sudo modprobe overlay 
  sudo modprobe br_netfilter
# Check the status
   lsmod | grep "overlay\|br_netfilter"
# Create k8s.conf file in /etc/sysctl.d
   sudo vim /etc/sysctl.d/k8s.conf
# Add below content, save and close the file
   net.bridge.bridge-nf-call-ip6tables = 1
   net.bridge.bridge-nf-call-iptables = 1
   net.ipv4.ip_forward = 1
# Apply newly added network params
   sudo sysctl --system
# Install necessary software tools 
   sudo apt-get install -y apt-transport-https ca-certificates curl \
   gpg gnupg2 software-properties-common   
# Add Kubernetes repository and keyscheck 
#  whether the /etc/apt/keyrings directory is present on your nodes.
#  If not, create the directory using the command below
   sudo mkdir -m 755 /etc/apt/keyrings
# Download and add the k8s repository key
   curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | \
  sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
# Add Kubernetes repository in the source list
   echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | \
  sudo tee /etc/apt/sources.list.d/kubernetes.list
# Update the package manager and install Kubernetes tools 
   sudo apt update
   sudo apt-get install -y kubelet kubeadm kubectl
# to disable update 
   sudo apt-mark hold kubelet kubeadm kubectl
# Install containerd runtime
   lsmod | grep "overlay\|br_netfilter"
   sudo apt-get update 
   sudo apt-get install ca-certificates curl
   sudo install -m 0755 -d /etc/apt/keyrings
   sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
   sudo chmod a+r /etc/apt/keyrings/docker.asc
   
   echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  
  sudo apt-get update 
# install dockerd
    sudo apt-get install containerd.io 
# Create a directory to store containerd config file in /etc/
    sudo mkdir -p /etc/containerd
# Generate the default config toml file
   sudo containerd config default|sudo tee /etc/containerd/config.toml
   sudo vim /etc/containerd/config.toml 
# save changes and restart the containerd service
   sudo systemctl restart containerd
   sudo systemctl enable containerd
   systemctl status containerd
# First run the below command and check the output
    sudo crictl ps
# If the crictl is not present, install it using the below command
   sudo apt install cri-tools
# Enable kubelet service 
   sudo systemctl enable kubelet   
#  Run the below command and check for existing images 
sudo crictl images
systemctl enable kubelet
# Pull necessary Kubernets images
sudo kubeadm config images pull --cri-socket unix:///var/run/containerd/containerd.sock
# execute command, you’ll see a list of containerd images
sudo crictl images
# This command will take some time to complete.Do not clear the output
# as you’ll need to refer to instructions from the command output
sudo kubeadm init 
## \
 ## --pod-network-cidr=10.244.0.0/16 \
 ## --cri-socket unix:///var/run/containerd/containerd.sock \
 ## --v=5 
# To start using your cluster, you need to run the following as a regular user:
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
# run this command and the output run that in worker nodes 
kubeadm token create --print-join-command
